Bfs question

// https://leetcode.com/problems/rotting-oranges // minimum passes require to convert all negative value on matrix
class Solution {
public:
    int dRow[4] = { -1, 0, 1, 0 };
    int dCol[4] = { 0, 1, 0, -1 };
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size() , m = grid[0].size();
        int cnt = 0;
        queue<pair<int , int>>q;
        for(int i = 0 ; i < n  ; i++){
            for(int j = 0 ; j < m ; j++){
                if(grid[i][j] == 1) cnt++;
                else if(grid[i][j] == 2){
                    q.push({i , j});
                }
            }
        }
        int time = 0;
        while(cnt != 0 && !q.empty()){
            int qsize = q.size();
            for(int i = 0 ; i < qsize ; i++){
                int ri = q.front().first;
                int rj = q.front().second;
                q.pop();
                for (int i = 0; i < 4; i++) {
                    int newX = ri + dRow[i];
                    int newY = rj + dCol[i];
                    if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == 1){
                        grid[newX][newY] = 2; cnt--;
                        q.push({ newX, newY});
                    }
                }
            }
            time++;
        }
        return cnt == 0 ? time : -1;
        
    }
};
// No of Islands
class Solution {
public:
    int dRow[4] = { -1, 0, 1, 0 };
    int dCol[4] = { 0, 1, 0, -1 };
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size(), islands = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1') {
                    islands++;
                    grid[i][j] = '0';
                    queue<pair<int, int>> todo;
                    todo.push({i, j});
                    while (!todo.empty()) {
                        pair<int, int> p = todo.front();
                        todo.pop();
                        for (int k = 0; k < 4; k++) {
                            int r = p.first + dRow[k], c = p.second + dCol[k];
                            if (r >= 0 && r < n && c >= 0 && c < m && grid[r][c] == '1') {
                                grid[r][c] = '0';
                                todo.push({r, c});
                            }
                        }
                    }
                }
            }
        }
        return islands;
    }
};
//https://leetcode.com/problems/word-ladder/
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        queue<string> todo;
        todo.push(beginWord);
        int ladder = 1;
        while (!todo.empty()) {
            int n = todo.size();
            for (int i = 0; i < n; i++) {
                string word = todo.front();
                todo.pop();
                if (word == endWord) {
                    return ladder;
                }
                dict.erase(word);
                for (int j = 0; j < word.size(); j++) {
                    char c = word[j];
                    for (int k = 0; k < 26; k++) {
                        word[j] = 'a' + k;
                        if (dict.find(word) != dict.end()) {
                            todo.push(word);
                            dict.erase(word);
                        }
                     }
                    word[j] = c;
                }
            }
            ladder++;
        }
        return 0;
    }
};