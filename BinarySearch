1. First and last index of binary 

#include "bits/stdc++.h"
using namespace std;
 
using ll = long long;
 
const ll inf = 1e18;
const int N = 2 * 1e5 + 10;

ll res;
//ll a[N];
int t[101][101];

int first(int a[] , int start , int end , int ele){
    int res = -1;
    while(start <= end){
        int mid = start + (end - start)/ 2;
        if(a[mid] > ele) end = mid -1;
        else if(a[mid] < ele) start = mid + 1;
        else{
            res = mid;
            end = mid - 1;
        }
    }
    return res;
}
int last(int a[] , int start , int end , int ele){
    int res = -1;
    while(start <= end){
        int mid = start + (end - start)/ 2;
        if(a[mid] > ele) end = mid -1;
        else if(a[mid] < ele) start = mid + 1;
        else{
            res = mid;
            start = mid + 1;
        }
    }
    return res;
}
void solve(){
	int n , x;
	cin >> n >> x;
	int a[n];
	for(int i = 0 ;i < n ;i++){
	    cin >> a[i];
	}
	if(first(a, 0 , n , x) == -1 or last(a , 0 , n - 1, x) == -1){
	    cout << -1 << "\n";
	    return;
	}
	cout << first(a, 0 , n , x) << " " << last(a , 0 , n - 1, x) << "\n";
}
 
int main(int argc, char const *argv[]){
	ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
    ll t = 1;
    cin >> t;
    while(t--){
    	solve();
    }
}

2. Find Smallest Letter Greater Than Target

class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int end = letters.size() - 1 , start = 0;
        int i = -1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(letters[mid] <= target) start = mid + 1;
            else{
                i =  mid;
                end = mid -1;
            }
        }
        if(i == -1) i = 0;
        return letters[i];
    }
};

3. 
// C++ implementation to find the index of first 1
// in an infinite sorted array of 0's and 1's

#include <bits/stdc++.h>
using namespace std;

int indexOfFirstOne(int arr[], int low, int high)
{
	int mid , res = -1;
	while (low <= high) {
		mid = (low + high) / 2;
		if (arr[mid] == 1){
			res = mid;
			end =  mid -1;
		}
		else if (arr[mid] == 1)
			high = mid - 1;
		else
			low = mid + 1;
	}

	return res;
}

int posOfFirstOne(int arr[])
{
	int l = 0, h = 1;
	while (arr[h] == 0) {
		l = h;
		h = 2 * h;
	}
	return indexOfFirstOne(arr, l, h);
}

int main()
{
	int arr[] = { 0, 0, 1, 1, 1, 1 };
	cout << "Index = "
		<< posOfFirstOne(arr);
	return 0;
}

4.  Find Minimum in Rotated Sorted Array

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n = nums.size();
        int low = 0 , high = n - 1 , prev , next;
        while(low <= high){
            int mid = low + (high -low)/2;
            prev = (mid + n - 1)%n;
            next = (mid+1)%n;
            if(nums[mid] <= nums[prev] && nums[mid] <= nums[next])
                return nums[mid];
            
            else if(nums[mid] > nums[high]) low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }
};

5. peek element - find the promising side , the side will be promising just mid with mid - 1 and mid + 1 .

int peakElement(int nums[], int n){
        int low = 0;
        int high = n - 1;
        if(n == 1) return 0;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(mid > 0 and mid < n - 1){
                if(nums[mid] > nums[mid - 1] and nums[mid] > nums[mid + 1])
                    return mid;
                else if(nums[mid] < nums[mid - 1]){
                    high = mid - 1;
                }
                else low = mid + 1;
            }
            else if(mid == 0 ){
                if(nums[mid] > nums[mid + 1]) return 0;
                else return 1;
            }
            else if(mid == n - 1){
                //cout << "hello";
                if(nums[mid] > nums[mid - 1]) {
                    //cout << "pp";
                    return n - 1 ;
                    
                }
                else return n - 2;
            }
        }
        return 0;
}

6. Search in a row wise and column wise sorted matrix