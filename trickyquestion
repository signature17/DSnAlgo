// Design special stack with getmin in O(1) time time and O(1) space


1. Using two stack (O(n) space : Pushing min element in s2 

2.While pushing
if x < mn : push 2*x-mn and put the provided x in mn
Similarly while popping
if s.top() < mn(indicates the flag): Restore the mn before popping: mn = 2* mn -s.top()

class MinStack {
public:
    long mn;
    stack<long>s;
    void push(int x) {
        if(s.empty()){
            mn = x;
            s.push(x);
        }
        else if(x < mn){
            long temp = mn; 
            mn = x;
            long y = x;
            y = 2*y - temp;
            s.push(y);
        }
        else{
            s.push(x);
        }
    }
    
    void pop() {
        if(s.empty())return;
        if(s.top() < mn){
            // if stack top contains element smaller than mn, it means the stack top is acting as flag
            mn = 2*mn - s.top();
            s.pop();
        }
        else{
            s.pop();
        }
    }
    
    int top() {
        if(s.empty())return -1;
        if(s.top() < mn){
            return mn;
        }
        return s.top();
    }
    
    int getMin() {
        if(s.empty())return -1;
        return mn;
    }
};
 
This question can also be done by Linked List

a. Make every new element the new head with updated min. 
b. And put the previous element next to the new head.

class MinStack {
public:
    struct Node{
        int val;
        int min;
        Node* next;
        
        Node(int val, int min, Node*next = NULL){
            this->val = val;
            this->min = min;
            this->next = next;
        }
    };
    Node*head;
    void push(int x) {
        if(!head){
            head = new Node(x, x);
        }
        else{
            // put every new element in the front with updated min, make them head
            head = new Node(x, min(x, head->min), head);
        }
    }
    
    void pop() {
        head = head->next;
    }
    
    int top() {
        return head->val;        
    }
    
    int getMin() {  
        return head->min;
    }
};

#include <iostream>
#include <stack>
#include <vector>
using namespace std;

/* A special stack having peek() pop() and
* push() along with additional getMin() that
* returns minimum value in a stack without
* using extra space and all operations in O(1)
* time.. ???? */
class SpecialStack
{
	
	// Sentinel value for min
	int min = -1;
	
	// DEMO_VALUE
	static const int demoVal = 9999;
	stack<int> st;

public:

	void getMin()
	{
		cout << "min is: " << min << endl;
	}

	void push(int val)
	{
		
		// If stack is empty OR current element
		// is less than min, update min.
		if (st.empty() || val < min)
		{
			min = val;
		}
		
		// Encode the current value with
		// demoVal, combine with min and
		// insert into stack
		st.push(val * demoVal + min);
		cout << "pushed: " << val << endl;
	}

	int pop()
	{
		// if stack is empty return -1;
		if ( st.empty() ) {
		cout << "stack underflow" << endl ;
		return -1;
		}
	
		int val = st.top();
		st.pop();
		
		// If stack is empty, there would
		// be no min value present, so
		// make min as -1
		if (!st.empty())
			min = st.top() % demoVal;
		else
			min = -1;
			
		cout << "popped: " << val / demoVal << endl;
		
		// Decode actual value from
		// encoded value
		return val / demoVal;
	}

	int peek()
	{
		
		// Decode actual value
		// from encoded value
		return st.top() / demoVal;
	}
};

// Driver Code
int main()
{
	SpecialStack s;

	vector<int> arr = { 3, 2, 6, 1, 8, 5, 5, 5, 5 };

	for(int i = 0; i < arr.size(); i++)
	{
		s.push(arr[i]);
		s.getMin();
	}
	
	cout << endl;
	for(int i = 0; i < arr.size(); i++)
	{
		s.pop();
		s.getMin();
	}
	return 0;
}

// This code is contributed by scisaif
