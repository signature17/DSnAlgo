Trapping rain water Problem

1. for every element we can find min(left , right). if we substract height from minimum we can get water store over it.

Time complexity - 0(n2); Space Complexity - o(1)

int maxWater(int arr[], int n)
{
     
    int res = 0;
    for (int i = 1; i < n-1; i++) {
        int left = arr[i];
        for (int j=0; j<i; j++)
           left = max(left, arr[j]);
        int right = arr[i];
        for (int j=i+1; j<n; j++)
           right = max(right, arr[j]);
       res = res + (min(left, right) - arr[i]);  
    }
 
    return res;
}

2. So inspite of keep calculate max on left and right we can pre-commute and return the ans += min(lmax[i] ,rmax[i]) - arr[i];

int findWater(int arr[], int n)
{

    int left[n];
    int right[n];
    int water = 0;
    left[0] = arr[0];
    for (int i = 1; i < n; i++)
        left[i] = max(left[i - 1], arr[i]);
    right[n - 1] = arr[n - 1];
    for (int i = n - 2; i >= 0; i--)
        right[i] = max(right[i + 1], arr[i]);
    for (int i = 0; i < n; i++)
        water += min(left[i], right[i]) - arr[i];
 
    return water;
}
Time complexity - 0(n); Space Complexity - o(n)

3. Two Pointer approach

class Solution {
public:
    int trap(vector<int>& a) {
        int n = a.size();
        if(n == 0) return 0;
        int l = 0 , r = n -1;
        int lmax = a[0] , rmax = a[r];
        int res = 0;
        while(l <= r){
            if(a[l] <= a[r]){
                if(a[l] >= lmax) lmax = a[l];
                else res += (lmax - a[l]);
                l++;
                
            }
            else{
                if(a[r] >= rmax) rmax = a[r];
                else res += (rmax - a[r]);
                r--;
            }
        }
        return res;
    }
};